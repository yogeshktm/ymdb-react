{"version":3,"sources":["components/MovieCard/index.js","container/MovieCardContainer/index.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","this","props","fullData","imdbID","imdbRating","totalSeasons","Title","Poster","Year","Actors","Plot","Language","Genre","Director","Runtime","Country","imdbLink","onSubmit","handleSubmit","className","autoFocus","type","id","autoComplete","onChange","handleChange","placeholder","handleMovieTypeChange","class","notFound","href","src","alt","React","Component","MovieCardContainer","state","title","released","genre","movieData","searchKeyword","searchType","getMovieDetails","bind","handleResponse","movieName","fetch","apiUrl","then","response","json","data","setState","catch","error","console","log","Response","e","preventDefault","length","target","value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc59f7b4.chunk.js","sourcesContent":["import React from 'react';\nexport class MovieCard extends React.Component{\n    render(){\n        const {imdbID,totalSeasons,imdbRating,Title,Poster,Year,Actors,Plot,Language,Genre,Director,Runtime,Country} = this.props.fullData;\n        let imdbLink = 'https://imdb.com/title/' + imdbID;\n        return(\n          <>\n          <form onSubmit={this.props.handleSubmit} className=\"search-box\">\n          <input autoFocus className=\"search\" type=\"search\" id=\"search\" autoComplete=\"off\" onChange={this.props.handleChange} placeholder=\"Search\"/>\n          <select onChange={this.props.handleMovieTypeChange}>\n            <option>movie</option>\n            <option>series</option>\n            <option>episodes</option>\n          </select>\n          <button className=\"btn\" type=\"submit\">SEARCH</button>\n         </form>\n        <div class=\"card\">\n          <div class={ this.props.notFound === true ? 'hidden' : 'movie-info' }>\n              <p><span className=\"release-year\">{Year}</span> - <span className=\"country\">{Country}</span></p>\n              <h2 className=\"movie-title\">{Title}</h2>\n              <p class=\"lang\">Language: {Language}</p>\n              <p>Runtime: {Runtime}</p>\n              <p>Genre: {Genre}</p>\n              <p>Director : {Director}</p>\n              <p>Cast: {Actors}</p>\n              <p>Plot:</p>\n              <p>{Plot}</p>\n              <p>IMDB Rating : {imdbRating} / 10</p>\n              <a href={imdbLink}>IMDB Link</a>\n              </div>\n              <img class=\"poster-img\" src={Poster === 'N/A' ? `https://dummyimage.com/390x610/c89f9b/fff.png&text=Poster+not+found` : Poster} alt={Title}/>\n            </div>\n          </>\n        );\n      }\n}","import React from 'react';\n\nimport { MovieCard } from '../../components/MovieCard';\n\nexport class MovieCardContainer extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      title:\"\",\n      released:\"\",\n      genre:\"\",\n      movieData:\"\",\n      searchKeyword:\"\",\n      notFound: false,\n      searchType: \"movie\"\n    };\n    this.getMovieDetails = this.getMovieDetails.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleResponse = this.handleResponse.bind(this);\n    this.handleMovieTypeChange = this.handleMovieTypeChange.bind(this);\n  }\n  componentWillMount(){\n\n  }\n  componentDidMount(){\n    let defaultMovie = \"Aaranya kaandam\"\n    this.getMovieDetails(defaultMovie);\n  }\n  getMovieDetails(movieName){\n    const apiUrl = \"http://www.omdbapi.com/?\";\n    const apiKey = \"7c5d79b\";\n    const searchType = this.state.searchType;\n    const finalUrl = apiUrl + 'apiKey=' + apiKey + '&t=' + movieName + '&type=' +searchType + '&plot=full';\n    fetch(finalUrl)\n        .then(response => response.json())\n        .then(this.handleResponse)\n        .then(\n            // data => console.log(data),\n            data => this.setState({\n                movieData:data\n            })\n        )\n        .catch(error => console.log(error) );\n\n  }\n  handleResponse (response){\n    if (response.Response === \"False\") {\n      console.log(\"inside\")\n      this.setState({\n        notFound:true\n      })\n    }\n    else{\n      this.setState({\n        notFound:false\n      })\n    }\n  return response;\n  }\n  handleSubmit(e){\n    e.preventDefault();\n    let searchKeyword = this.state.searchKeyword;\n    console.log(searchKeyword.length)\n    if(searchKeyword.length > 0){\n      this.getMovieDetails(this.state.searchKeyword,this.state.searchType);\n    }\n  }\n  handleChange(e){\n    console.log(e.target.value);\n    this.setState({\n      searchKeyword:e.target.value\n    })\n  }\n  handleMovieTypeChange(e){\n    console.log(e.target.value);\n    this.setState({\n      searchType:e.target.value\n    })\n  }\n  render(){\n      return(\n        <div class=\"container\">\n          <MovieCard notFound={this.state.notFound} \n          handleChange={this.handleChange} \n          handleSubmit={this.handleSubmit}\n          handleMovieTypeChange={this.handleMovieTypeChange} \n          fullData={this.state.movieData}>\n          </MovieCard>\n          {\n            this.state.notFound ? <p>Movie not found</p> : null\n          }\n        </div>\n      )\n    }\n}\n","import './App.css';\n\nimport { MovieCardContainer } from './container/MovieCardContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"logo\">\n        <h1>ðŸŽ¬ YMDB</h1>\n      </header>\n      <MovieCardContainer></MovieCardContainer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}